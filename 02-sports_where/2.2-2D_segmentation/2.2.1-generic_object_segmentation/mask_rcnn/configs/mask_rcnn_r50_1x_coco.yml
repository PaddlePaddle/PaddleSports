weights: output/mask_rcnn_r50_1x_coco/model_final

architecture: MaskRCNN
pretrain_weights: https://paddledet.bj.bcebos.com/models/pretrained/ResNet50_cos_pretrained.pdparams
filename: mask_rcnn

MaskRCNN:
  backbone:
    ResNet:
      # index 0 stands for res2
      depth: 50
      norm_type: bn
      freeze_at: 0
      return_idx: [ 2 ]
      num_stages: 3
  rpn_head:
    RPNHead:
      anchor_generator:
        aspect_ratios: [ 0.5, 1.0, 2.0 ]
        anchor_sizes: [ 32, 64, 128, 256, 512 ]
        strides: [ 16 ]
      rpn_target_assign:
        batch_size_per_im: 256
        fg_fraction: 0.5
        negative_overlap: 0.3
        positive_overlap: 0.7
        use_random: True
      train_proposal:
        min_size: 0.0
        nms_thresh: 0.7
        pre_nms_top_n: 12000
        post_nms_top_n: 2000
        topk_after_collect: False
      test_proposal:
        min_size: 0.0
        nms_thresh: 0.7
        pre_nms_top_n: 6000
        post_nms_top_n: 1000
  bbox_head:
    BBoxHead:
      head:
        name: Res5Head
      roi_extractor:
        resolution: 14
        sampling_ratio: 0
        aligned: True
      bbox_assigner:
        name: BBoxAssigner
        batch_size_per_im: 512
        bg_thresh: 0.5
        fg_thresh: 0.5
        fg_fraction: 0.25
        use_random: True
      with_pool: true
  mask_head:
    MaskHead:
      head:
        name: MaskFeat
        num_convs: 0
        out_channel: 256
      roi_extractor:
        resolution: 14
        sampling_ratio: 0
        aligned: True
      mask_assigner:
        name: MaskAssigner
        mask_resolution: 14
      share_bbox_feat: true
  # post process
  bbox_post_process:
    BBoxPostProcess:
      decode:
        name: RCNNBox
      nms:
        name: MultiClassNMS
        keep_top_k: 100
        score_threshold: 0.05
        nms_threshold: 0.5
  mask_post_process:
    MaskPostProcess:
      binary_thresh: 0.5





# datasets

metric: COCO
num_classes: 80

TrainDataset:
  COCODataSet:
    image_dir: val2017
    anno_path: annotations/instances_val2017.json
    dataset_dir: ../
    data_fields: ['image', 'gt_bbox', 'gt_class', 'gt_poly', 'is_crowd']

EvalDataset:
  COCODataSet:
    image_dir: val2017
    anno_path: annotations/instances_val2017.json
    dataset_dir: ../

TestDataset:
  ImageFolder:
    anno_path: annotations/instances_val2017.json # also support txt (like VOC's label_list.txt)
    dataset_dir: dataset/coco # if set, anno_path will be 'dataset_dir/anno_path'


# reader

worker_num: 1
TrainReader:
  sample_transforms:
  - Decode: {}
  - RandomResize: {target_size: [[640, 1333], [672, 1333], [704, 1333], [736, 1333], [768, 1333], [800, 1333]], interp: 2, keep_ratio: True}
  - RandomFlip: {prob: 0.5}
  - NormalizeImage: {is_scale: true, mean: [0.485,0.456,0.406], std: [0.229, 0.224,0.225]}
  - Permute: {}
  batch_transforms:
  - PadBatch: {pad_to_stride: -1}
  batch_size: 4
  shuffle: true
  drop_last: true
  collate_batch: false
  use_shared_memory: true


EvalReader:
  sample_transforms:
  - Decode: {}
  - Resize: {interp: 2, target_size: [800, 1333], keep_ratio: True}
  - NormalizeImage: {is_scale: true, mean: [0.485,0.456,0.406], std: [0.229, 0.224,0.225]}
  - Permute: {}
  batch_transforms:
  - PadBatch: {pad_to_stride: -1}
  batch_size: 1
  shuffle: false
  drop_last: false


TestReader:
  sample_transforms:
    - Decode: {}
    - Resize: {interp: 2, target_size: [800, 1333], keep_ratio: True}
    - NormalizeImage: {is_scale: true, mean: [0.485,0.456,0.406], std: [0.229, 0.224,0.225]}
    - Permute: {}
  batch_transforms:
    - PadBatch: {pad_to_stride: -1}
  batch_size: 1
  shuffle: false
  drop_last: false


# optimizer

epoch: 12

LearningRate:
  base_lr: 0.01
  schedulers:
  - PiecewiseDecay:
      gamma: 0.1
      milestones: [8, 11]
  - LinearWarmup:
      start_factor: 0.001
      steps: 1000

OptimizerBuilder:
  optimizer:
    momentum: 0.9
    type: Momentum
  regularizer:
    factor: 0.0001
    type: L2


# runtime

use_gpu: true
use_xpu: false
log_iter: 20
save_dir: output
snapshot_epoch: 1
print_flops: false

# Exporting the model
export:
  post_process: True  # Whether post-processing is included in the network when export model.
  nms: True           # Whether NMS is included in the network when export model.
  benchmark: False    # It is used to testing model performance, if set `True`, post-process and NMS will not be exported.
